QUESTION 1--------------------------------------------------------

KADANE'S Algorithm (Largest SUM Contiguous Subarray)

Problem Link-----------------------------------------------------

https://practice.geeksforgeeks.org/problems/kadanes-algorithm/0



Concept--------------------------------------------------------



https://www.geeksforgeeks.org/largest-sum-contiguous-subarray/



Initialize:
    max_so_far = 0
    max_ending_here = 0

Loop for each element of the array
  (a) max_ending_here = max_ending_here + a[i]
  (b) if(max_ending_here < 0)
            max_ending_here = 0
  (c) if(max_so_far < max_ending_here)
            max_so_far = max_ending_here
            
return max_so_far


#Note


In this solution if all numbers are negative then the least negative number should be the answer, therefore to include that we introduce 
a variable named "flag" that tells that if all the numbers in an array is negative and then a loop is run to choose the least negative 
one.








Solution Code--------------------------------------------------

Notations-- msf = max_so_far
            lm  = last_max





#include <iostream>
using namespace std;

int main() {
	
	int test;
	cin>>test;
	
	int n,arr[1000001],i;
	
	
	while(test--){
	    
	    int flag = 0;
	    cin>>n;
	    
	    for(i = 0 ; i < n ; i++){
	        
	        cin>>arr[i];
	        
	        if(arr[i] > 0){
	            
	            flag = 1;
	            
	        }
	        
	        
	    }
	    
	    int msf=0,lm=0;
	    
	    if(flag == 1){
	    
	        for(i = 0 ; i < n ; i++){
	        
	             msf += arr[i];
	            
	            if(msf < 0){
	                
	                msf = 0;
	                
	            }
	             
	            if(msf >= lm){
	                
	                lm = msf;
	                
	            } 
	        
	        }
	    }
	    else{
	        
	        int min = arr[0];
	        
	        for(i = 1 ; i < n ; i++){
	            
	            if(arr[i] > min){
	                min = arr[i];
	            }
	            
	        }
	        lm = min;
	        
	    }
	    
	    cout<<lm<<endl;
	    
	    
	    
	}
